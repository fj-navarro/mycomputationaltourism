[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Contemporary Computational Methods for Hospitality and Tourism",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\n\nTime series analysis:\n\nTime series description/examination\nTime series forecast\n\nMultivariate analysis:\n\nCausal relationship between variables\nStructural Equations\n\nNetwork analysis:\n\nDynamics of external digital transformation networks\n\nMachine learning/BD:\n\nPrices in Hospitality\nCustomer satisfaction\n\nAgent-based modeling:\n\nOvertourism\n\nGeographical inteligence:\n\nHotel location optimization"
  },
  {
    "objectID": "ts_univ_year.html#spanish-outbound-visitors-to-usa",
    "href": "ts_univ_year.html#spanish-outbound-visitors-to-usa",
    "title": "1  Univariate and Yearly",
    "section": "1.1 Spanish Outbound Visitors to USA",
    "text": "1.1 Spanish Outbound Visitors to USA\n\n1.1.1 Loading Libraries\n\nlibrary(readxl)\nlibrary(TSstudio)\nlibrary(tidyverse)\nlibrary(forecast)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(plotly)\n\n\n\n1.1.2 Importing the Dataset\n\nout_world &lt;- read_excel(\"data/out_world.xlsx\", skip = 5)\nexcel_sheets(\"data/out_world.xlsx\")\n\n[1] \"Outbound tourism (All series)\"\n\n\n\n\n1.1.3 Characterizing the TS Dataset\n\nclass(out_world)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nhead(out_world)\n\n# A tibble: 6 × 31\n  ...1     SERIES `1995` `1996` `1997` `1998` `1999` `2000` `2001` `2002` `2003`\n  &lt;chr&gt;    &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 &lt;NA&gt;     &lt;NA&gt;       NA     NA     NA     NA     NA     NA     NA     NA     NA\n2 Angola   TFR        NA    896    234   1059    781   1361   1569   2005     NA\n3 Antigua… TFR        NA     NA     NA     NA     NA     NA     NA     NA     NA\n4 Argenti… TFR        NA     NA     NA     NA     NA     NA     NA     NA     NA\n5 Armenia  TFR       140     40     43     82     87     56    168    191    235\n6 Aruba    TFR        NA     NA     NA     NA     NA    746    769    780    683\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `% Change 2022-2021` &lt;dbl&gt;\n\n\n\n\n1.1.4 Preprocessing\n\nPivot the table to tidy the data:\n\n\nnames(out_world)[1] &lt;- \"countries\"\nout_world_pvt &lt;- out_world |&gt;\n  pivot_longer(cols = starts_with(c(\"19\", \"20\")),\n               names_to = \"years\",\n               values_to = \"tourists\", \n               values_drop_na = FALSE)\nhead(out_world_pvt)\n\n# A tibble: 6 × 5\n  countries SERIES `% Change 2022-2021` years tourists\n  &lt;chr&gt;     &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n1 &lt;NA&gt;      &lt;NA&gt;                     NA 1995        NA\n2 &lt;NA&gt;      &lt;NA&gt;                     NA 1996        NA\n3 &lt;NA&gt;      &lt;NA&gt;                     NA 1997        NA\n4 &lt;NA&gt;      &lt;NA&gt;                     NA 1998        NA\n5 &lt;NA&gt;      &lt;NA&gt;                     NA 1999        NA\n6 &lt;NA&gt;      &lt;NA&gt;                     NA 2000        NA\n\n\n\nSelect and order the columns for the analysis:\n\n\nout_world_adj1 &lt;- out_world_pvt |&gt; \n  select(\"countries\",\"years\",\"tourists\") |&gt;\n  relocate(years) |&gt;\n  filter(countries == \"United States of America\")\nhead(out_world_adj1)\n\n# A tibble: 6 × 3\n  years countries                tourists\n  &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n1 1995  United States of America   302083\n2 1996  United States of America   324822\n3 1997  United States of America   328024\n4 1998  United States of America   326339\n5 1999  United States of America   362848\n6 2000  United States of America   361177\n\n\n\nConvert the date field in a Date object:\n\n\nout_world_date &lt;- out_world_adj1 |&gt;\n  mutate(out_world_adj1, \n         years = as.Date(out_world_adj1$years,\n                         format = \"%Y\"))\nhead(out_world_date)\n\n# A tibble: 6 × 3\n  years      countries                tourists\n  &lt;date&gt;     &lt;chr&gt;                       &lt;dbl&gt;\n1 1995-10-28 United States of America   302083\n2 1996-10-28 United States of America   324822\n3 1997-10-28 United States of America   328024\n4 1998-10-28 United States of America   326339\n5 1999-10-28 United States of America   362848\n6 2000-10-28 United States of America   361177\n\n\n\nArrange the data by date:\n\n\nout_world_ord &lt;- out_world_date |&gt;\n  arrange(years)\nhead(out_world_ord)\n\n# A tibble: 6 × 3\n  years      countries                tourists\n  &lt;date&gt;     &lt;chr&gt;                       &lt;dbl&gt;\n1 1995-10-28 United States of America   302083\n2 1996-10-28 United States of America   324822\n3 1997-10-28 United States of America   328024\n4 1998-10-28 United States of America   326339\n5 1999-10-28 United States of America   362848\n6 2000-10-28 United States of America   361177\n\n\n\nSet the start and end year of the ts:\n\n\nstart_point = year(min(out_world_ord$years))\n\n\nCreate a ts object:\n\n\nout_usa_ts &lt;- ts(out_world_ord$tourists,\n                 start = start_point,\n                 frequency = 1)\nts_info(out_usa_ts)\n\n The out_usa_ts series is a ts object with 1 variable and 28 observations\n Frequency: 1 \n Start time: 1995 1 \n End time: 2022 1 \n\n\n\nPlot the ts object:\n\n\nts_plot(out_usa_ts,\n        title = \"Spanish residents visiting USA\",\n        Xtitle = \"Years\",\n        Ytitle = \"Thousands of visitors\")\n\n\n\n\n\n\n\n1.1.5 Decomposition of TS\n\nCalculate MA of the ts object:\n\n\nout_usa_ma &lt;- ts_ma(out_usa_ts,\n                    n = c(3,5),\n                    plot = TRUE,\n                    multiple = TRUE)\n\nA line object has been specified, but lines is not in the mode\nAdding lines to the mode...\nA line object has been specified, but lines is not in the mode\nAdding lines to the mode...\n\npar(mfrow=c(1,2))\nplot.ts(out_usa_ma$ma_3)\nplot.ts(out_usa_ma$ma_5)\n\n\n\n\n\n\n1.1.6 Correlation with its lags\n\nUse the acf function:\n\n\nacf(out_usa_ts, lag.max = 12)\n\n\n\n\n\nWe now plot the lags:\n\n\nts_lags(out_usa_ts)"
  },
  {
    "objectID": "ts_univ_year.html#spanish-outbound-vs-income-per-capita",
    "href": "ts_univ_year.html#spanish-outbound-vs-income-per-capita",
    "title": "1  Univariate and Yearly",
    "section": "1.2 Spanish Outbound vs Income per Capita",
    "text": "1.2 Spanish Outbound vs Income per Capita\nWe’re looking for the correlation between Spanish outbound visitors to USA and the income per capita of Spanish.\n\n1.2.1 Importing the Income per Capita series\n\nWe import the data set from the Spanish INE:\n\n\n\n\nspain_income &lt;- read_excel(\"data/renta_percapita_esp.xlsx\", sheet = \"RDB\", skip = 3)\n\n\nCharacterize the ts dataset\n\n\nclass(spain_income)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nhead(spain_income)\n\n# A tibble: 6 × 43\n  ...1         Valor...2 `Índice España...3` ...4  Valor...5 `Índice España...6`\n  &lt;chr&gt;            &lt;dbl&gt;               &lt;dbl&gt; &lt;lgl&gt;     &lt;dbl&gt;               &lt;dbl&gt;\n1 Total            14542               100   NA        14580               100  \n2 Andalucía        11622                79.9 NA        11630                79.8\n3 Aragón           15541               107.  NA        15752               108. \n4 Asturias, P…     14711               101.  NA        14932               102. \n5 Balears, Il…     14967               103.  NA        15121               104. \n6 Canarias         12393                85.2 NA        12482                85.6\n# ℹ 37 more variables: `Tasa de Variación Interanual...7` &lt;dbl&gt;, ...8 &lt;lgl&gt;,\n#   Valor...9 &lt;dbl&gt;, `Índice España...10` &lt;dbl&gt;,\n#   `Tasa de Variación Interanual...11` &lt;dbl&gt;, ...12 &lt;lgl&gt;, Valor...13 &lt;dbl&gt;,\n#   `Índice España...14` &lt;dbl&gt;, `Tasa de Variación Interanual...15` &lt;dbl&gt;,\n#   ...16 &lt;lgl&gt;, Valor...17 &lt;dbl&gt;, `Índice España...18` &lt;dbl&gt;,\n#   `Tasa de Variación Interanual...19` &lt;dbl&gt;, ...20 &lt;lgl&gt;, Valor...21 &lt;dbl&gt;,\n#   `Índice España...22` &lt;dbl&gt;, `Tasa de Variación Interanual...23` &lt;dbl&gt;, …\n\n\n\nExtract the date to be analysed:\n\n\nspain_income_adj &lt;- spain_income |&gt;\n  select(cols = starts_with(\"Valor\"))\nspain_income_adj &lt;- spain_income_adj[1,]\n\n\nName the first row with years and pivot the table:\n\n\n# First we name the first row with years\nncol(spain_income_adj)\n\n[1] 11\n\nfor(i in 1:ncol(spain_income_adj)){\n  colnames(spain_income_adj)[i] &lt;- as.numeric(i+2009)\n}\n# Second, we pivot the table and convert years as Date\nspain_income_pivot &lt;- spain_income_adj |&gt;\n  pivot_longer(cols = starts_with(c(\"20\", \"21\")),\n               names_to = \"years\",\n               values_to = \"income_per_capita\", \n               values_drop_na = TRUE)\n\n\nspain_income_table &lt;- spain_income_pivot |&gt;\n  mutate(years = as.Date(spain_income_pivot$years,\n                         format = \"%Y\"))\n\nhead(spain_income_table)\n\n# A tibble: 6 × 2\n  years      income_per_capita\n  &lt;date&gt;                 &lt;dbl&gt;\n1 2010-10-28             14542\n2 2011-10-28             14580\n3 2012-10-28             13802\n4 2013-10-28             13801\n5 2014-10-28             13867\n6 2015-10-28             14431\n\n\n\nOrder the table:\n\n\nspain_income_ord &lt;- spain_income_table |&gt;\n  arrange(years)\n\n\nCreate a ts object\n\n\nstart_year2 = year(min(spain_income_ord$years))\nspain_income_ts &lt;- ts(spain_income_ord$\"income_per_capita\",\n                      start = start_year2,\n                      frequency = 1)\nts_info(spain_income_ts)\n\n The spain_income_ts series is a ts object with 1 variable and 11 observations\n Frequency: 1 \n Start time: 2010 1 \n End time: 2020 1 \n\n\n\nPlot the 2nd ts object:\n\n\nts_plot(spain_income_ts)\n\n\n\n\n\n\n\n1.2.2 Cross-correlation analysis\n\nMake the two series have the same time frame:\n\n\nout_usa_cc &lt;- window(out_usa_ts, start = 2010, end = 2020)\n\n\nPlot the two ts objects:\n\n\nplot_ly(x = time(out_usa_cc),\n        y = out_usa_cc,\n        type = \"scatter\",\n        mode = \"line\",\n        name = \"Spanish visitors to USA\") |&gt;\n  add_lines(x = time(spain_income_ts),\n            y = spain_income_ts,\n            name = \"Spanish income per capita\",\n            yaxis = \"y2\") |&gt;\n  layout(title = \"Correlation Analysis Outbound USA vs Income per Capita\", \n         yaxis2 = list(overlaying = \"y\", \n                       side = \"right\", \n                       title = \"Thousands\",\n                       showgrid = FALSE), \n         yaxis = list(title = \"Thousands of visitors\", \n         showgrid = FALSE),\n        legend = list(orientation = \"h\"),\n        margin = list(l = 50, r = 50, b = 50, t = 50, pad = 2))\n\n\n\n\n\n\nUse the ccf function:\n\n\nccf(out_usa_ts, spain_income_ts, lag.max = 6)\n\n\n\n\n\nPlot the relationship between both ts objects:\n\n\nccf_plot(x = out_usa_ts, y = spain_income_ts, lags = 0:6)\n\n\n\n\n\n\nConclusion:\n\nNo correlation exists between the two ts objects."
  },
  {
    "objectID": "ts_univ_month.html#incoming-total-number-of-tourists-to-spain",
    "href": "ts_univ_month.html#incoming-total-number-of-tourists-to-spain",
    "title": "2  Univariate and Monthly",
    "section": "2.1 Incoming Total Number of Tourists to Spain",
    "text": "2.1 Incoming Total Number of Tourists to Spain\n\n2.1.1 Loading libraries\n\nlibrary(readxl)\nlibrary(TSstudio)\nlibrary(tidyverse)\nlibrary(forecast)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(plotly)\nlibrary(stringr)\nlibrary(anytime)\n\n\n\n2.1.2 Importing the dataset\n\nnum_turistas_raw &lt;- read_excel(\"data/num_turistas.xlsx\", skip = 6)\n\n\n\n2.1.3 Characterizing the TS dataset\n\nclass(num_turistas_raw)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nhead(num_turistas_raw)\n\n# A tibble: 6 × 108\n  ...1     `2024M08` `2024M07` `2024M06` `2024M05` `2024M04` `2024M03` `2024M02`\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 \"Total\"         NA        NA        NA        NA        NA        NA        NA\n2 \"Dato b…  10930750  10851172   9313450   9256446   7831094   6347516   5009311\n3  &lt;NA&gt;           NA        NA        NA        NA        NA        NA        NA\n4  &lt;NA&gt;           NA        NA        NA        NA        NA        NA        NA\n5 \"Notas:\"        NA        NA        NA        NA        NA        NA        NA\n6 \"Desde …        NA        NA        NA        NA        NA        NA        NA\n# ℹ 100 more variables: `2024M01` &lt;dbl&gt;, `2023M12` &lt;dbl&gt;, `2023M11` &lt;dbl&gt;,\n#   `2023M10` &lt;dbl&gt;, `2023M09` &lt;dbl&gt;, `2023M08` &lt;dbl&gt;, `2023M07` &lt;dbl&gt;,\n#   `2023M06` &lt;dbl&gt;, `2023M05` &lt;dbl&gt;, `2023M04` &lt;dbl&gt;, `2023M03` &lt;dbl&gt;,\n#   `2023M02` &lt;dbl&gt;, `2023M01` &lt;dbl&gt;, `2022M12` &lt;dbl&gt;, `2022M11` &lt;dbl&gt;,\n#   `2022M10` &lt;dbl&gt;, `2022M09` &lt;dbl&gt;, `2022M08` &lt;dbl&gt;, `2022M07` &lt;dbl&gt;,\n#   `2022M06` &lt;dbl&gt;, `2022M05` &lt;dbl&gt;, `2022M04` &lt;dbl&gt;, `2022M03` &lt;dbl&gt;,\n#   `2022M02` &lt;dbl&gt;, `2022M01` &lt;dbl&gt;, `2021M12` &lt;dbl&gt;, `2021M11` &lt;dbl&gt;, …\n\n\n\n\n2.1.4 Preprocessing\n\nExtract the information from the sheet:\n\n\nnum_turistas_adj &lt;- num_turistas_raw[2,]\nhead(num_turistas_adj)\n\n# A tibble: 1 × 108\n  ...1     `2024M08` `2024M07` `2024M06` `2024M05` `2024M04` `2024M03` `2024M02`\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Dato ba…  10930750  10851172   9313450   9256446   7831094   6347516   5009311\n# ℹ 100 more variables: `2024M01` &lt;dbl&gt;, `2023M12` &lt;dbl&gt;, `2023M11` &lt;dbl&gt;,\n#   `2023M10` &lt;dbl&gt;, `2023M09` &lt;dbl&gt;, `2023M08` &lt;dbl&gt;, `2023M07` &lt;dbl&gt;,\n#   `2023M06` &lt;dbl&gt;, `2023M05` &lt;dbl&gt;, `2023M04` &lt;dbl&gt;, `2023M03` &lt;dbl&gt;,\n#   `2023M02` &lt;dbl&gt;, `2023M01` &lt;dbl&gt;, `2022M12` &lt;dbl&gt;, `2022M11` &lt;dbl&gt;,\n#   `2022M10` &lt;dbl&gt;, `2022M09` &lt;dbl&gt;, `2022M08` &lt;dbl&gt;, `2022M07` &lt;dbl&gt;,\n#   `2022M06` &lt;dbl&gt;, `2022M05` &lt;dbl&gt;, `2022M04` &lt;dbl&gt;, `2022M03` &lt;dbl&gt;,\n#   `2022M02` &lt;dbl&gt;, `2022M01` &lt;dbl&gt;, `2021M12` &lt;dbl&gt;, `2021M11` &lt;dbl&gt;, …\n\n\n\nPivot the table:\n\n\nnum_turistas_pvt &lt;- num_turistas_adj |&gt;\n  pivot_longer(cols = contains(\"M\"),\n               names_to = \"date\",\n               values_to = \"tourists\", \n               values_drop_na = FALSE)\nhead(num_turistas_pvt)\n\n# A tibble: 6 × 3\n  ...1      date    tourists\n  &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;\n1 Dato base 2024M08 10930750\n2 Dato base 2024M07 10851172\n3 Dato base 2024M06  9313450\n4 Dato base 2024M05  9256446\n5 Dato base 2024M04  7831094\n6 Dato base 2024M03  6347516\n\n\n\nChange the date column from chr to date format:\n\n\n# Change the \"M\" character for \"-\"\nnum_turistas_pvt$date &lt;- str_replace(num_turistas_pvt$date, \"M\", \"-\")\nnum_turistas_pvt$date &lt;- anydate(num_turistas_pvt$date)\nhead(num_turistas_pvt)\n\n# A tibble: 6 × 3\n  ...1      date       tourists\n  &lt;chr&gt;     &lt;date&gt;        &lt;dbl&gt;\n1 Dato base 2024-08-01 10930750\n2 Dato base 2024-07-01 10851172\n3 Dato base 2024-06-01  9313450\n4 Dato base 2024-05-01  9256446\n5 Dato base 2024-04-01  7831094\n6 Dato base 2024-03-01  6347516\n\n\n\nArrange the data by date:\n\n\nnum_turistas_ord &lt;- num_turistas_pvt |&gt;\n  arrange(date)\nhead(num_turistas_ord)\n\n# A tibble: 6 × 3\n  ...1      date       tourists\n  &lt;chr&gt;     &lt;date&gt;        &lt;dbl&gt;\n1 Dato base 2015-10-01  6432341\n2 Dato base 2015-11-01  3754802\n3 Dato base 2015-12-01  3512914\n4 Dato base 2016-01-01  3526537\n5 Dato base 2016-02-01  3678726\n6 Dato base 2016-03-01  4627206\n\nclass(num_turistas_ord)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\nIdentify if there are na and outliers:\n\n\n# Identify if na exist\nany(is.na(num_turistas_ord))\n\n[1] FALSE\n\n\n\n# Identify the ts outliers\ntsoutliers(num_turistas_ord$tourists)\n\n$index\ninteger(0)\n\n$replacements\nnumeric(0)\n\n\n\nMake a ts object:\n\n\n# Set the start and end year of the ts\nstart_point &lt;- c(year(min(num_turistas_ord$date)), month(min(num_turistas_ord$date)))\n\n\n# Create a ts object\nnum_turistas_ts &lt;- ts(num_turistas_ord$tourists,\n                      start = start_point,\n                      frequency = 12)\nhead(num_turistas_ts)\n\n         Jan     Feb     Mar Apr May Jun Jul Aug Sep     Oct     Nov     Dec\n2015                                                 6432341 3754802 3512914\n2016 3526537 3678726 4627206                                                \n\nts_info(num_turistas_ts)\n\n The num_turistas_ts series is a ts object with 1 variable and 107 observations\n Frequency: 12 \n Start time: 2015 10 \n End time: 2024 8 \n\n\n\n# Plot the ts object\nts_plot(num_turistas_ts)\n\n\n\n\n\n\n\n2.1.5 Decomposition of TS\n\nCalculate MA of the ts object:\n\n\nnum_turistas_ma &lt;- ts_ma(num_turistas_ts,\n                    n = c(3,5),\n                    plot = TRUE,\n                    multiple = TRUE)\n\nA line object has been specified, but lines is not in the mode\nAdding lines to the mode...\nA line object has been specified, but lines is not in the mode\nAdding lines to the mode...\n\n\n\nPlot the MA3 and MA5:\n\n\npar(mfrow=c(1,2))\nplot.ts(num_turistas_ma$ma_3)\nplot.ts(num_turistas_ma$ma_5)\n\n\n\n\n\nPerform classical decomposition:\n\n\nnum_turistas_dc &lt;- decompose(num_turistas_ts, type = \"additive\")\n\n\nPlot the output of the decompose function:\n\n\nplot(num_turistas_dc)\n\n\n\n\n\n\n2.1.6 Seasonality analysis\n\nBuild a seasonal plot:\n\n\nts_seasonal(num_turistas_ts, type = \"normal\")\n\n\n\n\n\n\nWe can complement the visual analysis of the seasonal component by plotting the cycle and box plots:\n\n\nts_seasonal(num_turistas_ts, type = \"all\")\n\n\n\n\n\n\nAlternatively, we can show a heatmap:\n\n\nts_heatmap(num_turistas_ts, color = \"Reds\")\n\n\n\n\n\n\nThe polar plot also offers a valuable perspective:\n\n\nggseasonplot(num_turistas_ts, polar = TRUE)\n\n\n\n\n\nLet’s use descriptive statistics to analyse seasonality.\n\n\n# First transform ts into a data.frame\nnum_turistas_df &lt;- data.frame(year = floor(time(num_turistas_ts)), \n                              month = cycle(num_turistas_ts), \n                              num_turistas = as.numeric(num_turistas_ts))\n\n# Set the month abbreviation and transform it as a factor\nnum_turistas_df$month &lt;- factor(month.abb[num_turistas_df$month], \n                                levels = month.abb)\nhead(num_turistas_df)\n\n  year month num_turistas\n1 2015   Oct      6432341\n2 2015   Nov      3754802\n3 2015   Dec      3512914\n4 2016   Jan      3526537\n5 2016   Feb      3678726\n6 2016   Mar      4627206\n\n\n\n# Summarize the series by its frequency\nnum_turistas_summary &lt;- num_turistas_df |&gt;\n  group_by(month) |&gt;\n  summarise(mean = mean(num_turistas), sd = sd(num_turistas))\nnum_turistas_summary\n\n# A tibble: 12 × 3\n   month     mean       sd\n   &lt;fct&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 Jan   3523347. 1313279.\n 2 Feb   3735333. 1390074.\n 3 Mar   4300777. 1886327.\n 4 Apr   5432116. 2956245.\n 5 May   6336378. 3290804.\n 6 Jun   6768070. 3240869.\n 7 Jul   8539555  2978774.\n 8 Aug   8702491  2904541.\n 9 Sep   7124097. 2799134.\n10 Oct   6401245. 2195838.\n11 Nov   3858490. 1374937.\n12 Dec   3675369  1290494.\n\n\n\n# Plot the summary of the Mean\nplot_ly(data = num_turistas_summary, x = ~month, y = ~mean, type = \"bar\", name = \"Mean\") |&gt;\n  layout(title = \"Num_Turistas - Monthly Average\", yaxis = list(title = \"Mean\", range = c(1000000, 9000000)))\n\n\n\n\n\n\n# Plot the monthly mean vs. standard deviation\nplot_ly(num_turistas_summary) |&gt;\n  add_lines(x = ~month, y = ~mean, name = \"Mean\") |&gt;\n  add_lines(x = ~month, y = ~sd, name = \"Standard Deviation\", \n            yaxis = \"y2\", \n            line = list(color = \"red\", \n                        dash = \"dash\", \n                        width = \"3\")) |&gt;\n  layout(title = \"Num.Tourists to Spain - Monthly Average vs Standard Deviation\",\n         yaxis = list(title = \"Mean\"),\n         yaxis2 = list(overlaying = \"y\",\n                       side = \"right\",\n                       title = \"Standard Deviation\"),\n         xaxis = list(title = \"Month\"),\n         legend = list(x = 0.05, y = 0.9),\n         margin = list(l = 50, r = 50))\n\n\n\n\n\n\n# Plot the distribution of the frequency units by using a density plot\nggplot(num_turistas_df, aes(x = num_turistas)) +\n  geom_density(aes(fill = month)) +\n  ggtitle(\"Num_turistas - Kernel Density Estimates by Month\") +\n  facet_grid(rows = vars(as.factor(month)))\n\n\n\n\n\nboxplot(num_turistas_df$num_turistas)\n\n\n\n\n\n\n2.1.7 Correlation (lag) analysis\n\nUse the acf function:\n\n\nacf(num_turistas_ts, lag.max = 60)\n\n\n\n\n\n# We can also use this for better visualization\nts_cor(num_turistas_ts)\n\n\n\n\n\n\nWe can zoom in on the relationship of the series with the last three seasonal lags:\n\n\nts_lags(num_turistas_ts, lags = c(12,24,36))\n\n\n\n\n\n\n\n2.1.8 Cross-correlation (causality) analysis\nProcessing 2nd dataset as ts object\n\n# Import the dataset \nipc_raw &lt;- read_excel(\"data/ipc.xlsx\", skip = 6)\n\n\n# Characterize the TS dataset \nclass(ipc_raw)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nhead(ipc_raw)\n\n# A tibble: 6 × 2\n  `Índice general`  ...2\n  &lt;chr&gt;            &lt;dbl&gt;\n1 2024M09            NA \n2 Índice            115.\n3 2024M08            NA \n4 Índice            116.\n5 2024M07            NA \n6 Índice            116.\n\n\n\n# Extract the information from the sheet\ncolnames(ipc_raw) &lt;- c(\"A\", \"Index\")\nipc_adj &lt;- filter(ipc_raw, grepl(\"Índice\", A))\nipc_adj$Index &lt;- format(ipc_adj$Index, nsmall = 3)\nipc_adj &lt;- transform(ipc_adj, Index = rev(Index))\nstr(ipc_adj)\n\n'data.frame':   273 obs. of  2 variables:\n $ A    : chr  \"Índice\" \"Índice\" \"Índice\" \"Índice\" ...\n $ Index: chr  \" 69.530\" \" 69.590\" \" 70.165\" \" 71.118\" ...\n\nhead(ipc_adj)\n\n       A   Index\n1 Índice  69.530\n2 Índice  69.590\n3 Índice  70.165\n4 Índice  71.118\n5 Índice  71.374\n6 Índice  71.377\n\ntail(ipc_adj)\n\n         A   Index\n268 Índice 115.472\n269 Índice 115.776\n270 Índice 116.212\n271 Índice 115.660\n272 Índice 115.707\n273 Índice 115.009\n\n\n\n# Identify if na exist\nany(is.na(ipc_adj))\n\n[1] FALSE\n\n# Identify outliers\nipc_adj$Index &lt;- as.numeric(ipc_adj$Index)\ntsoutliers(ipc_adj$Index)\n\n$index\ninteger(0)\n\n$replacements\nnumeric(0)\n\n\n\n# Create a ts object\nipc_ts &lt;- ts(data = ipc_adj$Index,\n             start = c(2002,1),\n             frequency = 12)\nhead(ipc_ts)\n\n        Jan    Feb    Mar    Apr    May    Jun\n2002 69.530 69.590 70.165 71.118 71.374 71.377\n\nts_info(ipc_ts)\n\n The ipc_ts series is a ts object with 1 variable and 273 observations\n Frequency: 12 \n Start time: 2002 1 \n End time: 2024 9 \n\n\n\n# Plot the ts object\nts_plot(ipc_ts)\n\n\n\n\n\nCross-correlation analysis\n\nccf(x = ipc_ts, y = num_turistas_ts, lag.max = 60)\n\n\n\nccf_plot(x = ipc_ts, y = num_turistas_ts, lags = 0:12)"
  },
  {
    "objectID": "ts_forecast.html#summary-of-steps",
    "href": "ts_forecast.html#summary-of-steps",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.1 Summary of Steps",
    "text": "3.1 Summary of Steps\nThis is a summary of the steps for forecasting a ts:\n\nChoose a forecast method:\n\nModel-based: regression, autoregressive.\nData-driven: Smoothing models are considered data-driven approaches, the most commonly employed is Exponential Smoothing or Holt-Winters methods. Other methods include naive models and neural networks.\n\nEvaluate the forecast performance:\n\nResidual analysis (with the training partition):\n\ncheckresiduals\n\nScore the forecast:\n\nforecast\naccuracy (with the test partition): provides error metrics for both the training (fitted values) and testing (the forecast)\ntest_forecast: evaluates the fit of the model on the training and testing\n\nForecast benchmark:\n\nnaive/snaive (they are baseline models)\n\n\nRecalibrate the model’s weights or coefficients with the full series:\n\nplot_forecast\n\nHandle forecast uncertainty:\n\nConfidence intervals:\n\nforecast —&gt; arg: level\n\nSimulation:\n\nforecast_sim\n\nHorse race approach:\n\ntrain_model"
  },
  {
    "objectID": "ts_forecast.html#loading-libraries",
    "href": "ts_forecast.html#loading-libraries",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.2 Loading libraries",
    "text": "3.2 Loading libraries\n\nlibrary(readxl)\nlibrary(TSstudio)\nlibrary(tidyverse)\nlibrary(forecast)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(plotly)\nlibrary(stringr)\nlibrary(anytime)"
  },
  {
    "objectID": "ts_forecast.html#characterize-the-ts-series",
    "href": "ts_forecast.html#characterize-the-ts-series",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.3 Characterize the ts Series",
    "text": "3.3 Characterize the ts Series\nWe rescue the ts object from previous chapter and plot it:\n\nts_info(num_turistas_ts)\n\n The num_turistas_ts series is a ts object with 1 variable and 107 observations\n Frequency: 12 \n Start time: 2015 10 \n End time: 2024 8 \n\nplot(num_turistas_ts)"
  },
  {
    "objectID": "ts_forecast.html#split-the-series",
    "href": "ts_forecast.html#split-the-series",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.4 Split the series",
    "text": "3.4 Split the series\nWe use the ts_split function from the TSstudio package to split the ts object:\n\nnum_turistas_partitions &lt;- ts_split(num_turistas_ts, \n                                    sample.out = 12)\ntrain &lt;- num_turistas_partitions$train\ntest &lt;- num_turistas_partitions$test\nts_info(train)\n\n The train series is a ts object with 1 variable and 95 observations\n Frequency: 12 \n Start time: 2015 10 \n End time: 2023 8 \n\nts_info(test)\n\n The test series is a ts object with 1 variable and 12 observations\n Frequency: 12 \n Start time: 2023 9 \n End time: 2024 8"
  },
  {
    "objectID": "ts_forecast.html#naive-benchmark-model",
    "href": "ts_forecast.html#naive-benchmark-model",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.5 (Naive) Benchmark Model",
    "text": "3.5 (Naive) Benchmark Model\n\nCreate a naive model as a baseline model:\n\n\nnum_turistas_naive &lt;- naive(train, h = 12)\n\n\nReview the performance of the mdoel on the training and testing partitions:\n\n\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_naive,\n              test = test)\n\n\n\n\n\n\nEvaluate the accuracy of the naive model on the training and test partitions:\n\n\naccuracy(num_turistas_naive, test)\n\n                      ME    RMSE     MAE       MPE     MAPE      MASE      ACF1\nTraining set    39934.28 1258125  942507      -Inf      Inf 0.4934233 0.4401904\nTest set     -2549918.00 3357453 2784851 -45.67665 47.83337 1.4579312 0.7332952\n             Theil's U\nTraining set        NA\nTest set      3.592602\n\n\n\nHowever, as the num_turistas_ts object has a strong season pattern, it make sense to use a seasonal naive model:\n\n\nnum_turistas_snaive &lt;- snaive(train, h =12)\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_snaive,\n              test = test)\n\n\n\n\naccuracy(num_turistas_snaive, test)\n\n                    ME      RMSE       MAE      MPE     MAPE      MASE\nTraining set  89873.76 2961996.4 1910138.6     -Inf      Inf 1.0000000\nTest set     865565.25  883071.4  865565.2 12.26306 12.26306 0.4531426\n                   ACF1 Theil's U\nTraining set  0.9529381        NA\nTest set     -0.3421711 0.7623464"
  },
  {
    "objectID": "ts_forecast.html#ma-model",
    "href": "ts_forecast.html#ma-model",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.6 MA Model",
    "text": "3.6 MA Model\n\nApply MA as a smoothing method:\n\n\nnum_turistas_ma &lt;- ma(train, order = 3, centre = TRUE)\nanyNA(train)\n\n[1] FALSE\n\nanyNA(num_turistas_ma)\n\n[1] TRUE\n\npar(mfrow = c(1,2))\nplot(num_turistas_ts)\nplot(num_turistas_ma)\n\n\n\n\n\nForecast the smoothed series:\n\n\nnum_turistas_ma_fc &lt;- forecast(train, h = 12)\nplot(num_turistas_ma_fc)\n\n\n\n\n\nNow we evaluate the model’s forecast performance:\n\n\naccuracy(num_turistas_ma_fc, test)\n\n                     ME     RMSE      MAE      MPE     MAPE      MASE      ACF1\nTraining set   8571.777 645778.3 416359.3     -Inf      Inf 0.2179733 0.4801891\nTest set     353727.748 761286.0 640802.0 2.690554 8.358979 0.3354741 0.7388972\n             Theil's U\nTraining set        NA\nTest set     0.6038854\n\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_ma_fc,\n              test = test)"
  },
  {
    "objectID": "ts_forecast.html#exponential-smoothing",
    "href": "ts_forecast.html#exponential-smoothing",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.7 Exponential Smoothing",
    "text": "3.7 Exponential Smoothing\n\n3.7.1 Simple exponential smoothing\nThe Simple Exponential Smoothing model is most suitable when the ts has no trend and no seasonal components. The model will only forecast the level of the series, but will not capture any short-term oscillation.\n\nWe use the train partition to train a SES model:\n\n\nnum_turistas_ses &lt;- ses(train, h = 12, initial = \"optimal\")\n\n\nNow we review the model details:\n\n\nnum_turistas_ses$model\n\nSimple exponential smoothing \n\nCall:\nses(y = train, h = 12, initial = \"optimal\")\n\n  Smoothing parameters:\n    alpha = 0.9999 \n\n  Initial states:\n    l = 5582860.6031 \n\n  sigma:  1267989\n\n     AIC     AICc      BIC \n3106.656 3106.920 3114.318 \n\n\n\nEvaluate the ses model’s performance:\n\n\naccuracy(num_turistas_ses, test)\n\n                      ME    RMSE       MAE       MPE     MAPE      MASE\nTraining set    48460.59 1254570  941595.9      -Inf      Inf 0.4929464\nTest set     -2549911.06 3357448 2784846.0 -45.67655 47.83329 1.4579288\n                  ACF1 Theil's U\nTraining set 0.4236306        NA\nTest set     0.7332952  3.592596\n\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_ses,\n              test = test)\n\n\n\n\n\n\nPlot the model:\n\n\nplot_forecast(num_turistas_ses)\n\n\n\n\n\n\n\n3.7.2 Holt model\nThe Holt model, also known as double exxponential smoothing model, is an expanded version of SES. This method is best when the ts has a strong linear trend and no seasonal component.\n\nWe use the train partition to train a Holt model:\n\n\nnum_turistas_holt &lt;- holt(train, \n                          h = 12, \n                          beta = 0.75,\n                          initial = \"optimal\",\n                          exponential = FALSE)\n\n\nNow we review the model details:\n\n\nnum_turistas_holt$model\n\nHolt's method \n\nCall:\nholt(y = train, h = 12, initial = \"optimal\", exponential = FALSE, \n    beta = 0.75)\n\n  Smoothing parameters:\n    alpha = 0.8954 \n    beta  = 0.75 \n\n  Initial states:\n    l = 3162861.8336 \n    b = 492277.7117 \n\n  sigma:  1378476\n\n     AIC     AICc      BIC \n3122.465 3122.909 3132.680 \n\n\n\nEvaluate the Holt model’s performance:\n\n\naccuracy(num_turistas_holt, test)\n\n                        ME    RMSE     MAE       MPE     MAPE     MASE\nTraining set -3.513902e+01 1349143 1095214       NaN      Inf 0.573369\nTest set     -5.849620e+06 6120495 5849620 -89.12534 89.12534 3.062406\n                    ACF1 Theil's U\nTraining set -0.05549152        NA\nTest set      0.56191829  6.080473\n\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_holt,\n              test = test)\n\n\n\n\n\n\nPlot the model:\n\n\nplot_forecast(num_turistas_holt)\n\n\n\n\n\n\n\n3.7.3 Holt-Winters model\nThe Holt-Winters model is the most advanced exponential smoothing model. Itself an extended version of the Holt model, it is most suitable when the series has both trend and seasonal components.\n\nWe use the train partition to train a HoltWinters model:\n\n\nnum_turistas_hw &lt;- hw(train, \n                      h = 12,\n                      seasonal = \"additive\",\n                      initial = \"optimal\")\n\n\nNow we review the model details:\n\n\nnum_turistas_hw$model\n\nHolt-Winters' additive method \n\nCall:\nhw(y = train, h = 12, seasonal = \"additive\", initial = \"optimal\")\n\n  Smoothing parameters:\n    alpha = 0.9999 \n    beta  = 0.0691 \n    gamma = 1e-04 \n\n  Initial states:\n    l = 5971165.9077 \n    b = 83194.9978 \n    s = 1568854 2863247 2682460 890283.2 351514.1 -446418.7\n           -1383275 -1803229 -2015248 -1872939 -1649971 814722.2\n\n  sigma:  708958.1\n\n     AIC     AICc      BIC \n3008.692 3016.640 3052.108 \n\n\n\nEvaluate the HoltWinters model’s performance:\n\n\naccuracy(num_turistas_hw, test)\n\n                      ME     RMSE      MAE       MPE     MAPE      MASE\nTraining set    3967.525 646505.6 423310.7      -Inf      Inf 0.2216125\nTest set     -396847.622 629642.7 511325.5 -7.235095 8.498105 0.2676903\n                  ACF1 Theil's U\nTraining set 0.4653751        NA\nTest set     0.5816594 0.6584862\n\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_hw,\n              test = test)\n\n\n\n\n\n\nPlot the model:\n\n\nplot_forecast(num_turistas_hw)"
  },
  {
    "objectID": "ts_forecast.html#linear-regression",
    "href": "ts_forecast.html#linear-regression",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.8 Linear Regression",
    "text": "3.8 Linear Regression\n\nWe will train a lm model with the tslm function:\n\n\nnum_turistas_lm &lt;- tslm(train ~season + trend + I(trend^2))\nsummary(num_turistas_lm)\n\n\nCall:\ntslm(formula = train ~ season + trend + I(trend^2))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-5421145 -1267982   713655  1478584  3022277 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5930274.7  1054259.9   5.625 2.57e-07 ***\nseason2      233000.7  1148171.7   0.203 0.839697    \nseason3      724476.6  1148269.7   0.631 0.529863    \nseason4     1832381.5  1148432.0   1.596 0.114484    \nseason5     2690071.4  1148659.2   2.342 0.021641 *  \nseason6     3185131.4  1148953.3   2.772 0.006906 ** \nseason7     5000338.1  1149317.4   4.351 3.92e-05 ***\nseason8     5186163.0  1149755.9   4.511 2.16e-05 ***\nseason9     3747723.0  1190318.7   3.149 0.002298 ** \nseason10    2724112.6  1148455.2   2.372 0.020065 *  \nseason11     275707.6  1148276.6   0.240 0.810855    \nseason12      89220.3  1148172.6   0.078 0.938253    \ntrend       -119128.8    34816.2  -3.422 0.000978 ***\nI(trend^2)     1015.8      351.3   2.891 0.004921 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2296000 on 81 degrees of freedom\nMultiple R-squared:  0.467, Adjusted R-squared:  0.3815 \nF-statistic: 5.459 on 13 and 81 DF,  p-value: 5.586e-07\n\n\n\nNow we forecast the corresponding observations:\n\n\nnum_turistas_flm &lt;- forecast(num_turistas_lm, h = 12)\n\n\nEvaluate the lm model’s forecast performance:\n\n\naccuracy(num_turistas_flm, test)\n\n                       ME    RMSE     MAE     MPE    MAPE      MASE      ACF1\nTraining set 9.688512e-12 2120338 1729562    -Inf     Inf 0.9054639 0.9471820\nTest set     1.179659e+06 1251821 1179659 15.7033 15.7033 0.6175775 0.4734555\n             Theil's U\nTraining set        NA\nTest set       1.01089\n\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_flm,\n              test = test)\n\n\n\n\n\n\nPlot the model:\n\n\nplot_forecast(num_turistas_flm)"
  },
  {
    "objectID": "ts_forecast.html#arima",
    "href": "ts_forecast.html#arima",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.9 ARIMA",
    "text": "3.9 ARIMA\n\n3.9.1 Non-automatic ARIMA\n\nWe identify the ARIMA process first to decide :\n\n\nplot(num_turistas_ts)\n\n\n\nplot(decompose(num_turistas_ts))\n\n\n\npar(mfrow = c(1,2))\nacf(num_turistas_ts)\npacf(num_turistas_ts)\n\n\n\n\n\nWe fit an ARIMA model with the train partition:\n\n\nnum_turistas_arima &lt;- arima(train, \n                            order = c(2,0,0),\n                            seasonal = list(order = c(2,1,0)))\nsummary(num_turistas_arima)\n\n\nCall:\narima(x = train, order = c(2, 0, 0), seasonal = list(order = c(2, 1, 0)))\n\nCoefficients:\n         ar1      ar2     sar1     sar2\n      1.4302  -0.4877  -0.4616  -0.2798\ns.e.  0.0958   0.0960   0.1090   0.1048\n\nsigma^2 estimated as 4.85e+11:  log likelihood = -1237.72,  aic = 2485.43\n\nTraining set error measures:\n                   ME   RMSE      MAE MPE MAPE      MASE       ACF1\nTraining set 11833.29 650970 420336.3 NaN  Inf 0.4459768 0.05655477\n\n\n\nWe check the residuals:\n\n\ncheckresiduals(num_turistas_arima)\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(2,0,0)(2,1,0)[12]\nQ* = 20.312, df = 15, p-value = 0.1603\n\nModel df: 4.   Total lags used: 19\n\n\n\nWe now forecast the trained model:\n\n\nnum_turistas_fc &lt;- forecast(num_turistas_arima, h = 12)\n\n\nWe evaluate the model’s performance:\n\n\naccuracy(num_turistas_fc, test)\n\n                    ME    RMSE      MAE      MPE     MAPE      MASE       ACF1\nTraining set  11833.29  650970 420336.3      NaN      Inf 0.2200554 0.05655477\nTest set     534946.06 1065820 870961.7 4.650023 10.79225 0.4559678 0.82032853\n             Theil's U\nTraining set        NA\nTest set     0.7914662\n\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_fc,\n              test = test)\n\n\n\n\n\n\n\n3.9.2 Automatic ARIMA\n\nWe apply the function auto.arimato the ts object:\n\n\nnum_turistas_arima2 &lt;- auto.arima(train)\nsummary(num_turistas_arima2)\n\nSeries: train \nARIMA(2,0,0)(2,1,0)[12] \n\nCoefficients:\n         ar1      ar2     sar1     sar2\n      1.4302  -0.4877  -0.4616  -0.2798\ns.e.  0.0958   0.0960   0.1090   0.1048\n\nsigma^2 = 5.096e+11:  log likelihood = -1237.72\nAIC=2485.43   AICc=2486.21   BIC=2497.53\n\nTraining set error measures:\n                   ME   RMSE      MAE MPE MAPE      MASE       ACF1\nTraining set 11833.29 650970 420336.3 NaN  Inf 0.2200554 0.05655477\n\n\n\nWe check the residuals:\n\n\ncheckresiduals(num_turistas_arima2)\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(2,0,0)(2,1,0)[12]\nQ* = 20.312, df = 15, p-value = 0.1603\n\nModel df: 4.   Total lags used: 19\n\n\n\nWe now forecast the trained model:\n\n\nnum_turistas_fc2 &lt;- forecast(num_turistas_arima2, h = 12)\n\n\nWe evaluate the model’s performance:\n\n\naccuracy(num_turistas_fc2, test)\n\n                    ME    RMSE      MAE      MPE     MAPE      MASE       ACF1\nTraining set  11833.29  650970 420336.3      NaN      Inf 0.2200554 0.05655477\nTest set     534946.06 1065820 870961.7 4.650023 10.79225 0.4559678 0.82032853\n             Theil's U\nTraining set        NA\nTest set     0.7914662\n\ntest_forecast(actual = num_turistas_ts,\n              forecast.obj = num_turistas_fc2,\n              test = test)\n\n\n\n\n\n\nWe can improvise with different search parameters:\n\n\nnum_turistas_arima3 &lt;- auto.arima(train,\n                                  max.order = 5,\n                                  D = 1,\n                                  d = 1,\n                                  stepwise = FALSE,\n                                  approximation = FALSE)\nsummary(num_turistas_arima3)\n\nSeries: train \nARIMA(1,1,0)(2,1,0)[12] \n\nCoefficients:\n         ar1    sar1     sar2\n      0.4662  -0.469  -0.2867\ns.e.  0.0987   0.108   0.1045\n\nsigma^2 = 5.331e+11:  log likelihood = -1223.91\nAIC=2455.82   AICc=2456.34   BIC=2465.44\n\nTraining set error measures:\n                   ME     RMSE      MAE MPE MAPE      MASE       ACF1\nTraining set 14744.94 665788.4 426301.8 NaN  Inf 0.2231784 0.06714752"
  },
  {
    "objectID": "ts_forecast.html#machine-learning",
    "href": "ts_forecast.html#machine-learning",
    "title": "3  Forecast Univariate Monthly",
    "section": "3.10 Machine Learning",
    "text": "3.10 Machine Learning\nPending writing Random Forest, GBM, and AutoML."
  }
]